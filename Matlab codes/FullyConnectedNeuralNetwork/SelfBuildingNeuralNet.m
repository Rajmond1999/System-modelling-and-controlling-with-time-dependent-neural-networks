clear all; close all; clc;

load ScopeData3;

WordLength=16;
FractionLength=7;
Signed=1;
DataType=[WordLength,FractionLength,Signed];



[Data]=ReadScopeData(out.ScopeData);
yo(:,1)=Data(:,1); % a row is a time slice, a clolumn is a separeted measurement
uo(:,1)=Data(:,2); 
t=Data(:,3);

[ux,yx]=GetRedyToUse(uo,yo);
[u,y,umin,umax,ymin,ymax]=GetRedyToUse(uo,yo);



NI = 1;     % Number of inputs
NO = 1;     % Number of outputs
%NAN = 20;    % number of additional neurons when creating a new network
NAF=1;      % Number of ActFunctions
BS=0;       % BiginnerState
%a=[0.005 , 0.7];      % The parameter of the activation function

%PopulationSize=3;  %The size of the population for the evolution
%MaxIterE=3;         %The maximal number of iteration for the evolution

ChanceOfMutation=0.8;
ChanceOfBigMutation=0.5;
ChanceOfSingleWeightMutationIfNotBig=0.8;
MagnitudeOfWeightMutation=1;
CanceOfAnActFuncMutation=0.3;
CanceOfInvertingTheActFunc=0.2;
ChanceOfANewNeuron=0.95;
ChanceOfLosingANeuron=0.3;

NAN = 30;
a=[0.5 , 0.7];
Step=[0.007,0.007];
R=7;
MaxIterG=50;         %The maximal number of iteration for the gradient


% [Net,Er]=BuildAndTeach(u,y,PopulationSize,MaxIterE,NAN,{@LReLu},{a},BS,...
%     ChanceOfMutation,ChanceOfBigMutation,...
%     ChanceOfSingleWeightMutationIfNotBig,...
%     MagnitudeOfWeightMutation,...
%     CanceOfAnActFuncMutation,CanceOfInvertingTheActFunc,...
%     ChanceOfANewNeuron,ChanceOfLosingANeuron);

Net=CreateSBNN(NI,NO,BS,NAF,NAN);
% The best output generated by the evolution teaching:
%ynsb=SimSBNN(Net,u,{@LReLu},{a});

% Converting to matrix form
[w,NL,NNL]=GetReadyForBackpropagation(Net);

% Teaching with gradient and back propagation

[wt,Error]=TeachFCNN(u,y,w,NI,NO,NL,NNL,@LReLu,@DLReLu,a,Step,MaxIterG,R,BS);
yngr=SimFCNN(u,wt,NI,NO,NL,NNL,@LReLu,a,BS);

Error(end)

figure(2)
subplot(311)
hold on;
plot(y','b')
plot(yngr','r')
legend('Elvárt kimenet','A háló kimenete');
title('A tanítás eredménye')

subplot(312)
hold on;
plot(u)
title('A háló bemenete');

subplot(313)
hold on;
plot(Error','b')
title('Négyzetes hiba a tanítás során')


%Testiong of the conversion from one stricture to the other
ytest=SimFCNN(u,w,NI,NO,NL,NNL,@LReLu,a,BS);


% Export for Matlab

%wa=CellToArray(wt,NL,NNL);

% Activation funtions

function y=Sigm(s,a)
    teta=0;
    %y = 1./(1+exp(-a*s));
    y=1./(1+exp(-(a*s-teta)));
end

function y = DSigm(s, a)
    teta=0;
    %y= exp(-a*s)./((1+exp(-a*s)).^2);
    y=(a*exp(-(a*s-teta)))./(1+exp(-(a*s-teta))).^2;
end
function y=TangH(s,a)
    teta=0;
   y=(1-exp(-(a*s-teta)))./(1+exp(-(a*s-teta)));
end

function y = DTangH(s, a)
    teta=0;
  y=((a*exp(-(a*s-teta))).*(1+(a*exp(-(a*s-teta))))+...
    (a*exp(-(a*s-teta))).*(1-(a*exp(-(a*s-teta)))))./...
    ((a*exp(-(a*s-teta)))+1).^2 ;
end


function y=LReLu(s,a)
    if s>0
        y=a(2)*s;
    else
        y=a(1)*s;
    end
end

function y = DLReLu(s, a)
    if s>0
        y=a(2);
    else
        y=a(1);
    end
end